class Solution {
public:
    
        
   int backtrack(vector<vector<int>>&grid,int i,int j,vector<vector<int>>&visited)
   {
       if(i<0 || j<0 || i>grid.size()-1 ||  j>grid[0].size()-1 || visited[i][j]==1)
       {
           return 0;    
       }
       if(grid[i][j]==0)
       {
           return 0;
       }
           
    visited[i][j]=1;
    int up=backtrack(grid,i+1,j,visited);
    int down=backtrack(grid,i,j+1,visited);
    int left=backtrack(grid,i-1,j,visited);
    int right=backtrack(grid,i,j-1,visited);
    visited[i][j]=0;
           
           
    return grid[i][j]+max(max(up,left),max(down,right));
       
       
       //return 0;
   }
    /*
    
    return max(backtrack())
    */
    
    int getMaximumGold(vector<vector<int>>& grid) {
       // vector<vector<int>>visited;
        int row=grid.size();
        int col=grid[0].size();
        int sum=INT_MIN;
        
        int maxsum=0;
        vector<vector<int>> visited(row,vector<int>(col,0));
        
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                
                maxsum=max(maxsum,backtrack(grid,i,j,visited));
                
            }
        }
        return maxsum;
        
        
    }
};
