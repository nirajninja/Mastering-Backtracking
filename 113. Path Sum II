/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
   // int value;
    void backtrack(TreeNode* root, vector<vector<int>>&ans, int target, vector<int>&curr)
    { 
        
        if(root==NULL)
        {
            return;
        }
        
        if(root->left==NULL && root->right==NULL)
        {
            if(target==root->val){
            
                curr.push_back(root->val);
                ans.push_back(curr);
                curr.pop_back();
                }
            return ;
            
        }
        
        if(root->left)
        {
            curr.push_back(root->val);
            backtrack(root->left,ans,target-root->val,curr);
            curr.pop_back();
        }
         
        
        if(root->right)
        {
            curr.push_back(root->val);
            backtrack(root->right,ans,target-root->val,curr);
            curr.pop_back();
        }
        
    }
    
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        
        vector<vector<int>>ans;
        vector<int>curr;
        
       backtrack(root,ans,targetSum,curr);
        
        return ans;
        
        
        
    }
};
